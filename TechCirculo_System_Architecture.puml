@startuml TechCirculo_System_Architecture

!theme plain
skinparam packageStyle rectangle
skinparam component {
    BackgroundColor #3aa8dbff
    BorderColor #55a4d9ff
}

title TechCirculo 2.0 - System Architecture

package "Frontend Layer" {
    [Landing Page] as Landing
    [Authentication UI] as AuthUI
    [Dashboard] as Dashboard
    [Community Pages] as CommunityUI
    [Profile Management] as ProfileUI
    [Points System UI] as PointsUI
    [Analytics Dashboard] as AnalyticsUI
    
    note right of Landing : Static HTML/CSS/JS\nResponsive Design
    note right of PointsUI : Real-time WebSocket\nConnections
}

package "Security Layer" {
    [JWT Filter] as JWT
    [OAuth2 Handler] as OAuth2
    [Security Config] as Security
    [CORS Config] as CORS
    
    note right of JWT : JWT Token Validation\nUser Authentication
}

package "Controller Layer" {
    [Home Controller] as HomeCtrl
    [User Controller] as UserCtrl
    [Profile Controller] as ProfileCtrl
    [Community Controller] as CommunityCtrl
    [Post Controller] as PostCtrl
    [Points Controller] as PointsCtrl
    [Analytics Controller] as AnalyticsCtrl
    
    note right of PostCtrl : RESTful APIs\nMultipart File Upload
}

package "Service Layer" {
    [User Service] as UserSvc
    [Profile Service] as ProfileSvc
    [Community Service] as CommunitySvc
    [Post Service] as PostSvc
    [Points Service] as PointsSvc
    [Badge Service] as BadgeSvc
    [Analytics Service] as AnalyticsSvc
    [File Service] as FileSvc
    
    note right of PointsSvc : Points Calculation\nLevel Management\nStreak Tracking
}

package "Repository Layer" {
    [User Repository] as UserRepo
    [Profile Repository] as ProfileRepo
    [Community Repository] as CommunityRepo
    [Post Repository] as PostRepo
    [Points Repository] as PointsRepo
    [Badge Repository] as BadgeRepo
    [Transaction Repository] as TransactionRepo
    
    note right of UserRepo : JPA/Hibernate\nCustom Queries
}

package "Model Layer" {
    [User Entity] as UserEntity
    [Profile Entity] as ProfileEntity
    [Community Entity] as CommunityEntity
    [Post Entity] as PostEntity
    [Points Entity] as PointsEntity
    [Badge Entity] as BadgeEntity
    [Transaction Entity] as TransactionEntity
    
    note right of UserEntity : JPA Entities\nRelationship Mapping
}

package "External Systems" {
    [Google OAuth] as GoogleOAuth
    [File System] as FileSystem
    [Email Service] as EmailSvc
    
    note right of FileSystem : Upload Storage\nProfile Pictures\nPost Images
}

database "MySQL Database" {
    [users] as UsersTable
    [profiles] as ProfilesTable
    [communities] as CommunitiesTable
    [posts] as PostsTable
    [user_points] as PointsTable
    [badges] as BadgesTable
    [points_transactions] as TransactionsTable
    [user_communities] as UserCommunitiesTable
    [comments] as CommentsTable
    [post_likes] as PostLikesTable
    [announcements] as AnnouncementsTable
}

package "Real-time Features" {
    [WebSocket Config] as WSConfig
    [WebSocket Handler] as WSHandler
    [Real-time Notifications] as RTNotifications
    
    note right of WSConfig : Live Updates\nInstant Notifications
}

' Frontend to Controller connections
Landing --> HomeCtrl : HTTP Requests
AuthUI --> UserCtrl : Login/Register
Dashboard --> PointsCtrl : Points Data
CommunityUI --> CommunityCtrl : Community Operations
ProfileUI --> ProfileCtrl : Profile Management
PointsUI --> PointsCtrl : Points & Badges
AnalyticsUI --> AnalyticsCtrl : Analytics Data

' Security Layer connections
AuthUI --> OAuth2 : OAuth Login
UserCtrl --> JWT : Token Validation
ProfileCtrl --> Security : Authorization
CommunityCtrl --> CORS : Cross-Origin

' Controller to Service connections
UserCtrl --> UserSvc
ProfileCtrl --> ProfileSvc
CommunityCtrl --> CommunitySvc
PostCtrl --> PostSvc
PointsCtrl --> PointsSvc
PointsCtrl --> BadgeSvc
AnalyticsCtrl --> AnalyticsSvc
PostCtrl --> FileSvc

' Service to Repository connections
UserSvc --> UserRepo
ProfileSvc --> ProfileRepo
CommunitySvc --> CommunityRepo
PostSvc --> PostRepo
PointsSvc --> PointsRepo
BadgeSvc --> BadgeRepo
PointsSvc --> TransactionRepo

' Repository to Entity connections
UserRepo --> UserEntity
ProfileRepo --> ProfileEntity
CommunityRepo --> CommunityEntity
PostRepo --> PostEntity
PointsRepo --> PointsEntity
BadgeRepo --> BadgeEntity
TransactionRepo --> TransactionEntity

' Entity to Database connections
UserEntity --> UsersTable
ProfileEntity --> ProfilesTable
CommunityEntity --> CommunitiesTable
PostEntity --> PostsTable
PointsEntity --> PointsTable
BadgeEntity --> BadgesTable
TransactionEntity --> TransactionsTable

' External System connections
OAuth2 --> GoogleOAuth : Authentication
FileSvc --> FileSystem : File Operations
UserSvc --> EmailSvc : Notifications

' Real-time connections
PointsUI --> WSConfig : WebSocket Connection
PointsSvc --> WSHandler : Points Updates
WSHandler --> RTNotifications : Push Notifications

@enduml